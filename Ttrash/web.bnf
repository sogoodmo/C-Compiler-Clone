program ::= extern_list decl_list | decl_list
extern_list ::= extern extern_list_prime
extern_list_prime ::= extern extern_list_prime | epsilon
extern ::= 'extern' type_spec IDENT '(' params ')' ';'
decl_list ::= decl decl_list_prime
decl_list_prime ::= decl decl_list_prime | epsilon
decl ::= var_decl | fun_decl
var_decl ::= var_type IDENT ';'
type_spec ::= 'void' | var_type
var_type  ::= 'int' |  'float' |  'bool'
fun_decl ::= type_spec IDENT '(' params ')' block
params ::= param_list |  'void' | epsilon
param_list ::= param param_list_prime
param_list_prime ::= ',' param param_list_prime | epsilon
param ::= var_type IDENT
block ::= '{' local_decls stmt_list '}'
local_decls ::= local_decl local_decls | epsilon
local_decl ::= var_type IDENT ';'
stmt_list ::= stmt stmt_list | epsilon
stmt ::= expr_stmt  |  block |  if_stmt |  while_stmt |  return_stmt
expr_stmt ::= expr ';' | ';'
while_stmt ::= 'while' '(' expr ')' stmt
if_stmt ::= 'if' '(' expr ')' block else_stmt
else_stmt  ::= 'else' block | epsilon
return_stmt ::= 'return' ';' | 'return' expr ';'
expr ::= IDENT '=' expr | rval_or
rval_or ::= rval_and rval_or_prime
rval_or_prime ::= '||' rval_and rval_or_prime | epsilon
rval_and ::= rval_eq rval_and_prime
rval_and_prime ::= '&&' rval_eq rval_and_prime | epsilon
rval_eq ::= rval_cmp rval_eq_prime
rval_eq_prime ::= '==' rval_cmp | '!=' rval_cmp | epsilon
rval_cmp ::= rval_add rval_cmp_prime
rval_cmp_prime ::= '<=' rval_add | '<' rval_add | '>=' rval_add | '>' rval_add | epsilon
rval_add ::= rval_mul rval_add_prime
rval_add_prime ::= '+' rval_mul  | '-' rval_mul | epsilon
rval_mul ::= rval_neg rval_mul_prime
rval_mul_prime ::= '*' rval_neg  | '/' rval_neg  | '%' rval_neg | epsilon
rval_neg ::= '-' rval_neg | '!' rval_neg | rval_par
rval_par ::= '(' expr ')' | rval_ident
rval_ident ::= IDENT | IDENT '(' args ')' | rval_term
rval_term ::= INT_LIT | FLOAT_LIT | BOOL_LIT
args ::= arg_list |  epsilon
arg_list ::= expr arg_list_prime
arg_list_prime ::= ',' expr arg_list_prime | epsilon

#### mike site
program⟶ extern_list decl_list 
program⟶decl_list
extern_list⟶ extern extern_list_prime
extern_list_prime⟶ extern extern_list_prime
extern_list⟶
extern⟶ 'extern' type_spec IDENT '(' params ')' ';'
decl_list⟶ decl decl_list_prime
decl_list_prime⟶ decl decl_list_prime 
decl_list_prime⟶
decl⟶var_decl 
decl⟶fun_decl
var_decl⟶ var_type IDENT ';'
type_spec⟶'void' 
type_spec⟶var_type
var_type⟶ 'int' 
var_type⟶'float'
var_type⟶'bool'
fun_decl⟶ type_spec IDENT '(' params ')' block
params⟶ param_list 
params⟶'void'
params⟶
param_list⟶ param param_list_prime
param_list_prime⟶ ',' param param_list_prime 
param_list_prime⟶
param⟶ var_type IDENT
block⟶ '{' local_decls stmt_list '}'
local_decls⟶ local_decl local_decls 
local_decls⟶
local_decl⟶ var_type IDENT ';'
stmt_list⟶ stmt stmt_list 
stmt_list⟶
stmt⟶ return_stmt
stmt⟶ if_stmt 
stmt⟶ block
stmt⟶ expr_stmt 
stmt⟶ while_stmt 
expr_stmt⟶expr ';' 
else_stmt⟶';'
while_stmt⟶ 'while' '(' expr ')' stmt
if_stmt⟶ 'if' '(' expr ')' block else_stmt
else_stmt⟶  'else' block 
else_stmt⟶
return_stmt⟶ 'return' ';' 
return_stmt⟶'return' expr ';'
expr⟶ IDENT '=' expr 
expr⟶rval_or
rval_or⟶ rval_and rval_or_prime
rval_or_prime⟶ '||' rval_and rval_or_prime 
rval_or_prime⟶
rval_and⟶ rval_eq rval_and_prime
rval_and_prime⟶ '&&' rval_eq rval_and_prime 
rval_and_prime⟶
rval_eq⟶ rval_cmp rval_eq_prime
rval_eq_prime⟶ '==' rval_cmp 
rval_eq_prime⟶'!=' rval_cmp
rval_eq_prime⟶
rval_cmp⟶ rval_add rval_cmp_prime
rval_cmp_prime⟶'<=' rval_add 
rval_cmp_prime⟶'<' rval_add 
rval_cmp_prime⟶'>=' rval_add 
rval_cmp_prime⟶'>' rval_add 
rval_cmp_prime⟶
rval_add⟶ rval_mul rval_add_prime
rval_add_prime⟶ '+' rval_mul  
rval_add_prime⟶'-' rval_mul 
rval_add_prime⟶
rval_mul⟶ rval_neg rval_mul_prime
rval_mul_prime⟶ '*' rval_neg  
rval_mul_prime⟶'/' rval_neg  
rval_mul_prime⟶'%' rval_neg 
rval_mul_prime⟶
rval_neg⟶ '-' rval_neg 
rval_neg⟶'!' rval_neg 
rval_neg⟶rval_par
rval_par⟶ '(' expr ')' 
rval_par⟶rval_ident
rval_ident⟶ IDENT 
rval_ident⟶IDENT '(' args ')' 
rval_ident⟶rval_term
rval_term⟶ INT_LIT 
rval_term⟶FLOAT_LIT 
rval_term⟶BOOL_LIT
args⟶ arg_list 
args⟶ 
arg_list⟶ expr arg_list_prime
arg_list_prime⟶ ',' expr arg_list_prime 
arg_list_prime⟶


###
PROGRAM -> EXTERN_LIST DECL_LIST | DECL_LIST.
EXTERN_LIST -> EXTERN EXTERN_LIST_PRIME.
EXTERN_LIST_PRIME -> EXTERN EXTERN_LIST_PRIME |  .
EXTERN -> 'EXTERN' TYPE_SPEC  ident '(' PARAMS ')' ';'.
DECL_LIST -> DECL DECL_LIST_PRIME.
DECL_LIST_PRIME -> DECL DECL_LIST_PRIME |  .


DECL -> VAR_TYPE ident DECL_PRIME | 'VOID' ident '(' PARAMS ')' BLOCK.
DECL_PRIME -> ';' | '(' PARAMS ')' BLOCK.

VAR_DECL -> VAR_TYPE  ident ';'.
TYPE_SPEC -> 'VOID' | VAR_TYPE.
VAR_TYPE  -> 'INT' |  'FLOAT' |  'BOOL'.
FUN_DECL -> TYPE_SPEC  ident '(' PARAMS ')' BLOCK.
PARAMS -> PARAM_LIST |  'VOID' |  .
PARAM_LIST -> PARAM PARAM_LIST_PRIME.
PARAM_LIST_PRIME -> 'comma' PARAM PARAM_LIST_PRIME |  .
PARAM -> VAR_TYPE  ident.
BLOCK -> 'curl_op' LOCAL_DECLS STMT_LIST 'curl_close'.
LOCAL_DECLS -> LOCAL_DECL LOCAL_DECLS |  .
LOCAL_DECL -> VAR_TYPE  ident ';'.
STMT_LIST -> STMT STMT_LIST |  .
STMT -> EXPR_STMT  |  BLOCK |  IF_STMT |  WHILE_STMT |  RETURN_STMT.
EXPR_STMT -> EXPR ';' | ';'.
WHILE_STMT -> 'WHILE' '(' EXPR ')' STMT.
IF_STMT -> 'IF' '(' EXPR ')' BLOCK ELSE_STMT.
ELSE_STMT  -> 'ELSE' BLOCK |  .



RETURN_STMT -> 'RETURN' RETURN_STMT_PRIME .
RETURN_STMT_PRIME -> ';' | EXPR ';'.



EXPR ->  ident 'eq' EXPR | RVAL_OR.
RVAL_OR -> RVAL_AND RVAL_OR_PRIME.
RVAL_OR_PRIME -> 'bool_or' RVAL_AND RVAL_OR_PRIME |  .
RVAL_AND -> RVAL_EQ RVAL_AND_PRIME.
RVAL_AND_PRIME -> 'bool_and' RVAL_EQ RVAL_AND_PRIME |  .
RVAL_EQ -> RVAL_CMP RVAL_EQ_PRIME.
RVAL_EQ_PRIME -> 'bool_eq' RVAL_CMP | 'bool_neq' RVAL_CMP |  .
RVAL_CMP -> RVAL_ADD RVAL_CMP_PRIME.
RVAL_CMP_PRIME -> 'bool_lte' RVAL_ADD | 'bool_lt' RVAL_ADD | 'bool_gte' RVAL_ADD | 'bool_gt' RVAL_ADD |  .
RVAL_ADD -> RVAL_MUL RVAL_ADD_PRIME.
RVAL_ADD_PRIME -> 'add' RVAL_MUL  | 'minus' RVAL_MUL |  .
RVAL_MUL -> RVAL_NEG RVAL_MUL_PRIME.
RVAL_MUL_PRIME -> 'mul' RVAL_NEG  | 'div' RVAL_NEG  | 'mod' RVAL_NEG |  .
RVAL_NEG -> 'minus' RVAL_NEG | 'bool_neg' RVAL_NEG | RVAL_PAR.
RVAL_PAR -> '(' EXPR ')' | RVAL_IDENT.


RVAL_IDENT -> ident RVAL_IDENT_PRIME | RVAL_TERM .
RVAL_IDENT_PRIME ->  '(' ARGS ')' | . 


RVAL_TERM -> int_lit | float_lit | bool_lit.
ARGS -> ARG_LIST |   .
ARG_LIST -> EXPR ARG_LIST_PRIME.
ARG_LIST_PRIME -> 'comma' EXPR ARG_LIST_PRIME |  .

###
PROGRAM -> EXTERN_LIST DECL_LIST | DECL_LIST.
EXTERN_LIST -> EXTERN EXTERN_LIST_PRIME.
EXTERN_LIST_PRIME -> EXTERN EXTERN_LIST_PRIME |  .
EXTERN -> 'EXTERN' TYPE_SPEC  ident '(' PARAMS ')' ';'.
DECL_LIST -> DECL DECL_LIST_PRIME.
DECL_LIST_PRIME -> DECL DECL_LIST_PRIME |  .
DECL -> VAR_DECL | FUN_DECL.
VAR_DECL -> VAR_TYPE  ident ';'.
TYPE_SPEC -> 'VOID' | VAR_TYPE.
VAR_TYPE  -> 'INT' |  'FLOAT' |  'BOOL'.
FUN_DECL -> TYPE_SPEC  ident '(' PARAMS ')' BLOCK.
PARAMS -> PARAM_LIST |  'VOID' |  .
PARAM_LIST -> PARAM PARAM_LIST_PRIME.
PARAM_LIST_PRIME -> 'comma' PARAM PARAM_LIST_PRIME |  .
PARAM -> VAR_TYPE  ident.
BLOCK -> 'curl_op' LOCAL_DECLS STMT_LIST 'curl_close'.
LOCAL_DECLS -> LOCAL_DECL LOCAL_DECLS |  .
LOCAL_DECL -> VAR_TYPE  ident ';'.
STMT_LIST -> STMT STMT_LIST |  .
STMT -> EXPR_STMT  |  BLOCK |  IF_STMT |  WHILE_STMT |  RETURN_STMT.
EXPR_STMT -> EXPR ';' | ';'.
WHILE_STMT -> 'WHILE' '(' EXPR ')' STMT.
IF_STMT -> 'IF' '(' EXPR ')' BLOCK ELSE_STMT.
ELSE_STMT  -> 'ELSE' BLOCK |  .
RETURN_STMT -> 'RETURN' ';' | 'RETURN' EXPR ';'.
EXPR ->  ident 'eq' EXPR | RVAL_OR.
RVAL_OR -> RVAL_AND RVAL_OR_PRIME.
RVAL_OR_PRIME -> 'bool_or' RVAL_AND RVAL_OR_PRIME |  .
RVAL_AND -> RVAL_EQ RVAL_AND_PRIME.
RVAL_AND_PRIME -> 'bool_and' RVAL_EQ RVAL_AND_PRIME |  .
RVAL_EQ -> RVAL_CMP RVAL_EQ_PRIME.
RVAL_EQ_PRIME -> 'bool_eq' RVAL_CMP | 'bool_neq' RVAL_CMP |  .
RVAL_CMP -> RVAL_ADD RVAL_CMP_PRIME.
RVAL_CMP_PRIME -> 'bool_lte' RVAL_ADD | 'bool_lt' RVAL_ADD | 'bool_gte' RVAL_ADD | 'bool_gt' RVAL_ADD |  .
RVAL_ADD -> RVAL_MUL RVAL_ADD_PRIME.
RVAL_ADD_PRIME -> 'add' RVAL_MUL  | 'minus' RVAL_MUL |  .
RVAL_MUL -> RVAL_NEG RVAL_MUL_PRIME.
RVAL_MUL_PRIME -> 'mul' RVAL_NEG  | 'div' RVAL_NEG  | 'mod' RVAL_NEG |  .
RVAL_NEG -> 'minus' RVAL_NEG | 'bool_neg' RVAL_NEG | RVAL_PAR.
RVAL_PAR -> '(' EXPR ')' | RVAL_IDENT.
RVAL_IDENT ->  ident |  ident '(' ARGS ')' | RVAL_TERM.
RVAL_TERM -> int_lit | float_lit | bool_lit.
ARGS -> ARG_LIST |   .
ARG_LIST -> EXPR ARG_LIST_PRIME.
ARG_LIST_PRIME -> 'comma' EXPR ARG_LIST_PRIME |  .